//--------------------------------------------------------------------------------------------------
//= rotmg風ボタンモジュール v2
//--------------------------------------------------------------------------------------------------
//	MAD GOD風のボタンサービスを提供するモジュールです。
//	HSP標準の button 命令のような、複数ウィンドウへの設置は対応しておりません。
//	ボタンを重ねて設置し、どちらにもマウスを当てた状態でクリックすると、
//	どちらのジャンプも順番に実行されてしまう点に注意してください。
//	ボタンの描画自体は、ボタンIDが若いものが後ろに表示されます。
//	ボタンがクリックされた時に、システム変数statへクリックしたボタンIDが代入されます。
//	このモジュールより先にChamferFillモジュールをincludeすれば、ボタンの描画に使用されます。
//	このモジュールより先にMousePosモジュールをincludeすれば、ボタンのクリック判定に使用されます。
//--------------------------------------------------------------------------------------------------
#define	mgButton(%1="", %2, %3=ginfo_cx, %4=ginfo_cy, %5=54, %6=27, %7=0)	_l=%2:_mgButton ""+%1, _l, %3, %4, %5, %6, %7
#define	mgButtonPrm(%1, %2=-1, %3=-1, %4="", %5="", %6="", %7="", %8="")	_txt=%2:_l=%3:_x=%4:_y=%5:_w=%6:_h=%7:_t=%8:_mgButtonPrm %1, _txt, _l, _x, _y, _w, _h, _t
#define mgButtonClear(%1=-1) _mgButtonClear %1

#module _mgButton_
	//----------------------------------------------------------------------------------------------
	//= モジュール内で使用するWin32 API
	//----------------------------------------------------------------------------------------------
	#uselib "GDI32.DLL"
	#func  GetTextExtentPoint32 "GetTextExtentPoint32A" int, int, int, int

	//----------------------------------------------------------------------------------------------
	//= モジュール内定数
	//----------------------------------------------------------------------------------------------
	#define BG_COLOR		255,255,255
	#define BG_COLOR_HOVER	255,220,133
	#define TEXT_COLOR		54,54,54

	//----------------------------------------------------------------------------------------------
	//= モジュール内で使用する命令(渡された変数をstatへ代入)
	//----------------------------------------------------------------------------------------------
	#deffunc local SetStat int _p
	return _p

	//----------------------------------------------------------------------------------------------
	//= 初期化命令(include時に自動実行)
	//----------------------------------------------------------------------------------------------
	#deffunc mgButtonInit int _m
		ButtonMax = _m
		if(ButtonMax <= 0){ButtonMax = 1}
		 dim ButtonFlag,		ButtonMax	//生存フラグ
		 dim ButtonHover,		ButtonMax	//マウスを当てているか
		 dim ButtonPosX,		ButtonMax	//X座標
		 dim ButtonPosY,		ButtonMax	//Y座標
		 dim ButtonSizeW,		ButtonMax	//横幅
		 dim ButtonSizeH,		ButtonMax	//縦幅
		sdim ButtonText,		ButtonMax	//ボタンの文字内容
		ldim ButtonLabel,		ButtonMax	//クリックした時にジャンプするラベル
		 dim ButtonType,		ButtonMax	//ジャンプのタイプ(goto/gosub)
	return

	button

	//----------------------------------------------------------------------------------------------
	//= ボタン設置命令
	//----------------------------------------------------------------------------------------------
	//	mgButton "text", *label, p1, p2, p3, p4, p5
	//
	//	"text" = ボタンのテキスト
	//	*label = 押した時にジャンプするラベル
	//	p1 = 左上X座標
	//	p2 = 左上Y座標
	//	p3 = 縦幅
	//	p4 = 横幅
	//	p5 = 挙動のタイプ
	//----------------------------------------------------------------------------------------------
	//	ボタンを設置する命令。この命令はボタンを設置するだけです。
	//	mgButtonCalc命令でボタンのクリック判定を行い、mgButtonDrawでボタンの描画を行います。
	//	p5 が 0ならば goto / 0以外ならば gosub として動作します。
	//	この命令を実行すると、設置したボタンの[ボタンID](HSP標準のオブジェクトIDのようなもの)が
	//	システム変数statに代入されています。
	//----------------------------------------------------------------------------------------------
	#deffunc _mgButton str _txt, var _label, int _x, int _y, int _w, int _h, int _type
		//使用されていないインデックスを探す
		Idx = -1
		repeat ButtonMax
			if(ButtonFlag(cnt) == 0){
				Idx = cnt
			}
		loop
		//使用されていないインデックスがなかった場合(-1)はButtonMaxを1つ拡張する
		if(Idx == -1){
			Idx = ButtonMax
			ButtonMax++
		}
		//ボタン情報をセット
		ButtonPosX(Idx) = _x
		ButtonPosY(Idx) = _y
		ButtonText(Idx) = ""+_txt
		ButtonSizeW(Idx) = _w
		ButtonSizeH(Idx) = _h
		ButtonType(Idx) = _type
		ButtonHover(Idx) = 0
		ButtonLabel(Idx) = _label
		ButtonFlag(Idx) = 1
		pos ginfo_cx, ginfo_cy+_h
	return Idx

	//----------------------------------------------------------------------------------------------
	//= ボタン内容変更命令
	//----------------------------------------------------------------------------------------------
	//	mgButtonPrm ボタンID, "text", *label, p1, p2, p3, p4, p5
	//
	//	ボタンID以外のパラメータは、mgButton(設置命令)と同様です。
	//----------------------------------------------------------------------------------------------
	//	内容を変更したいパラメータを入力してください。
	//	パラメータを省略した部分は変更されません。
	//
	//	例：
	//		mgButtonPrm 0, "OK", , , , , , 1
	//
	//	この例では、ボタンID[0]のボタンの テキスト と 挙動のタイプ のみを変更しています。
	//----------------------------------------------------------------------------------------------
	#deffunc _mgButtonPrm int _id, var _txt, var _label, var _x, var _y, var _w, var _h, var _type
		//有効なIDかどうか
		if(_id >= 0){
			if(_id <= ButtonMax-1){
				//そのボタンが生存しているかどうか
				if(ButtonFlag(_id)==1){
					//テキスト
					if(vartype(_txt)==2){ButtonText(_id) = _txt}
					//ラベル
					if(vartype(_label)==1){ButtonLabel(_id) = _label}
					//PosX
					if(vartype(_x)==4){ButtonPosX(_id) = _x}
					//PosY
					if(vartype(_y)==4){ButtonPosY(_id) = _y}
					//SizeW
					if(vartype(_w)==4){ButtonSizeW(_id) = _w}
					//SizeH
					if(vartype(_h)==4){ButtonSizeH(_id) = _h}
					//Type
					if(vartype(_type)==4){ButtonType(_id) = _type}
				}
			}
		}
	return

	//----------------------------------------------------------------------------------------------
	//= ボタン消去命令
	//----------------------------------------------------------------------------------------------
	//	mgButtonClear p1
	//
	//	p1 = ボタンID
	//----------------------------------------------------------------------------------------------
	//	mgButton命令で設置したボタンを消去します。
	//	p1を省略または負数にすると、設置されたボタン全てを消去します。
	//----------------------------------------------------------------------------------------------
	#deffunc _mgButtonClear int _id
		if(_id < 0){
			repeat ButtonMax
				ButtonFlag(cnt) = 0
			loop
		} else:if(_id <= ButtonMax-1){
			ButtonFlag(_id) = 0
		}
	return

	//----------------------------------------------------------------------------------------------
	//= ボタン判定処理命令
	//----------------------------------------------------------------------------------------------
	//	mgButtonCalc
	//----------------------------------------------------------------------------------------------
	//	全てのボタンに対し、カーソル/クリック判定を行います。
	//	ボタンがクリックされた時に、システム変数statへクリックしたボタンIDが代入されます。
	//----------------------------------------------------------------------------------------------
	#deffunc mgButtonCalc
		getkey _click, 1 : if(_click==1) : click++ : else : click=0
		#ifdef _MousePos_
			mox = MousePosX() : moy = MousePosY()
		#else
			mox = mousex : moy = mousey
		#endif
		repeat ButtonMax
			if(ButtonFlag(cnt) = 1){
				ButtonHover(cnt) = 0
				if(mox >= ButtonPosX(cnt)){
					if(mox <= ButtonPosX(cnt)+ButtonSizeW(cnt)-1){
						if(moy >= ButtonPosY(cnt)){
							if(moy <= ButtonPosY(cnt)+ButtonSizeH(cnt)-1){
								ButtonHover(cnt) = 1
								if(click == 1){
									if(ButtonType(cnt) == 0){
										SetStat@_mgButton_ cnt
										goto ButtonLabel(cnt)
									} else {
										SetStat@_mgButton_ cnt
										gosub ButtonLabel(cnt)
									}
								}
							}
						}
					}
				}
			}
		loop
	return

	//----------------------------------------------------------------------------------------------
	//= ボタン描画命令
	//----------------------------------------------------------------------------------------------
	//	mgButtonDraw
	//----------------------------------------------------------------------------------------------
	//	全てのボタンを描画します。
	//	ボタンIDが若いものが後ろに表示されます。
	//----------------------------------------------------------------------------------------------
	#deffunc mgButtonDraw
		font "Arial", 14, 1
		repeat ButtonMax
			if(ButtonFlag(cnt) == 1){
				if(ButtonHover(cnt) == 0){
					color BG_COLOR
				} else {
					color BG_COLOR_HOVER
				}
				//ChamferFillモジュールがインクルードされているかどうか
				#ifdef _ChamferFill_
					ChamferFill ButtonPosX(cnt), ButtonPosY(cnt), ButtonSizeW(cnt), ButtonSizeH(cnt)
				#else
					boxf ButtonPosX(cnt), ButtonPosY(cnt), ButtonPosX(cnt)+ButtonSizeW(cnt)-1, ButtonPosY(cnt)+ButtonSizeH(cnt)-1
				#endif
				dim size, 2 : String = ButtonText(cnt)
				GetTextExtentPoint32 hdc, varptr(String), strlen(String), varptr(size)
				color TEXT_COLOR
				x = ButtonPosX(cnt)+ButtonSizeW(cnt)/2
				y = ButtonPosY(cnt)+ButtonSizeH(cnt)/2
				pos x-size(0)/2, y-size(1)/2
				mes ""+ButtonText(cnt)
			}
		loop
	return

#global
mgButtonInit 1

//--------------------------------------------------------------------------------------------------
//= 以下サンプル
//--------------------------------------------------------------------------------------------------
#if 0
	//ボタンを設置
	mgButton "Enter", *__Enter, 16, 16, 64, 27, 1

	pos 16, 51	//第3,4パラメータを省略した場合はカレントポジションに設置
	mgButton "Clear", *__Clear, , , 64, 27, 1

	pos 16, 86
	mgButton "Set", *__Prm, , , 64, 27, 1

	//----------------------------------------------------------------------------------------------
	//= メインループ
	//----------------------------------------------------------------------------------------------
	*__Main
		//処理
		mgButtonCalc

		//描画
		redraw 0
		color 54, 54, 54:boxf
		
		mgButtonDraw
		
		redraw 1
		await 16
	goto *__Main

	//----------------------------------------------------------------------------------------------
	//= サブルーチン
	//----------------------------------------------------------------------------------------------
		*__Enter
			dialog "[Enter] がクリックされました。\nボタンIDは"+stat+"です。"
		return

		*__Clear
			mgButtonClear stat
		return

		*__Prm
			mgButtonPrm stat, "End", *__End, 32, , 320, 128, 0
		return

		*__End
			end
#endif