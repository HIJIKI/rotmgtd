//--------------------------------------------------------------------------------------------------
//= 矩形同士の当たり判定
//--------------------------------------------------------------------------------------------------
// getcoli_bb p1, p2, p3, p4, p5, p6, p7, p8
// p1,p2=矩形1の左上座標(x, y)
// p3,p4=矩形1の右下座標(x, y)
// p5,p6=矩形2の左上座標(x, y)
// p7,p8=矩形2の右下座標(x, y)
//--------------------------------------------------------------------------------------------------
	#module _getcoli_bb_
		;変数を入れ替えるモージュール内ローカル命令
		#deffunc local exchange var var1, var var2
			tmp = var1
			var1 = var2
			var2 = tmp
		return
		;矩形同士の当たり判定関数
		#defcfunc getcoli_bb int _ox1, int _oy1, int _ox2, int _oy2, int _tx1, int _ty1, int _tx2, int _ty2
			;返り値初期化
			ret = 0
			;引数を変数化(そのままだとexchangeが動かないため)
			ox1 = _ox1 : oy1 = _oy1 : ox2 = _ox2 : oy2 = _oy2
			tx1 = _tx1 : ty1 = _ty1 : tx2 = _tx2 : ty2 = _ty2
			;強制的に左上と右下座標になるように入れ替え
			if ox1 > ox2 : exchange@_getcoli_bb_ ox1, ox2
			if oy1 > oy2 : exchange@_getcoli_bb_ oy1, oy2
			if tx1 > tx2 : exchange@_getcoli_bb_ tx1, tx2
			if ty1 > ty2 : exchange@_getcoli_bb_ ty1, ty2
			;当たり判定
			if ox1 <= tx2 {
				if ox2 >= tx1 {
					if oy1 <= ty2 {
						if oy2 >= ty1 {
							ret = 1
						}
					}
				}
			}
		return ret
	#global

//--------------------------------------------------------------------------------------------------
//= 矩形と線分の当たり判定
//--------------------------------------------------------------------------------------------------
// getcoli_bl p1, p2, p3, p4, p5, p6, p7, p8
// p1,p2=矩形の左上座標(x, y)
// p3,p4=矩形の右下座標(x, y)
// p5,p6=線分の左上座標(x, y)
// p7,p8=線分の右下座標(x, y)
//--------------------------------------------------------------------------------------------------
	#module _getcoli_bl_
		#defcfunc getcoli_bl int _bx1, int _by1, int _bx2, int _by2, int _lx1, int _ly1, int _lx2, int _ly2
			;返り値初期化
			ret = 0
			;線分の範囲内に矩形が存在するかチェック
			if getcoli_bb(_bx1, _by1, _bx2, _by2, _lx1, _ly1, _lx2, _ly2) = 1 {
				;4点のラインに対する位置をチェック
				ht = 0	;チェックした点がラインより上にある場合は-1を、下にある場合は1を足していく
				a = _bx1 : b1 = _by1 : b2 = _by2
				gosub *__hantei
				a = _bx2 : b1 = _by1 : b2 = _by2
				gosub *__hantei
				;結果代入
				if (ht=4)|(ht=-4) {
					ret = 0		;全て一致(ヒットしていない)
				} else {
					ret = 1		;ひとつでも一致しなかった(ヒットしている)
				}
			} else {
				return ret
			}
		return ret
		
		*__hantei
			if _lx1!_lx2 {
				;x座標がaの時の直線のy座標(bb)を求める。
				;bb = ( (y1-y2)*a + (x1*y2)-(x2*y1) ) / (x1-x2)
				bb = ((_ly1-_ly2)*a + (_lx1*_ly2)-(_lx2*_ly1)) / (_lx1-_lx2)
				;x座標が同じ2点が線に対して上にあるか下にあるか調べる。
				if bb>b1 : ht += -1    ;上（線より）
				if bb<b1 : ht += 1    ;下
				if bb>b2 : ht += -1    ;上（線より）
				if bb<b2 : ht += 1    ;下
			} else {
				if _lx1>a : ht += -1    ;左
				if _lx1<a : ht += 1    ;右
			}
		return
	#global
//--------------------------------------------------------------------------------------------------
//= 2点の距離(の2乗)を利用する衝突判定
//--------------------------------------------------------------------------------------------------
// getcoli_dis p1, p2, p3, p4, p5, p6
// p1,p2=点1の座標(x, y)
// p3,p4=点2の座標(x, y)
// p5=当たり判定の半径距離(pixel)
// p6=返り値のモード選択(0 or other)
//--------------------------------------------------------------------------------------------------
// 「距離を利用する」という性質上。当たり判定の形状は正円となります。
// p6を省略、または0にした場合は、衝突していれば1を、していなければ0を返します。
// p6に1を指定した場合は、衝突していれば2点の距離(の2乗)を、していなければ-1を返します。
//--------------------------------------------------------------------------------------------------
	#module _getcoli_dis_
		#defcfunc _getcoli_dis	int _x1, int _y1, int _x2, int _y2, int _hitdis, int _mode
			hitdis = _hitdis*_hitdis
			disx = _x1 - _x2
			disy = _y1 - _y2
			dis = disx*disx+disy*disy
			if _mode = 0 {
				ret = (dis<=hitdis)
			} else {
				if dis<=hitdis {
					ret = dis
				} else {
					ret = -1
				}
			}
		return ret
	#global
	#define ctype getcoli_dis(%1,%2,%3,%4,%5,%6=0) _getcoli_dis(%1,%2,%3,%4,%5,%6)


//--------------------------------------------------------------------------------------------------
//= 以下サンプル
//--------------------------------------------------------------------------------------------------
#if 0
	bgcol = 255,255,255
	*__main
		redraw 0
		color bgcol(0),bgcol(1),bgcol(2):boxf
		
		x1 = ginfo_winx/2 - 80
		y1 = ginfo_winy/2 - 80
		x2 = ginfo_winx/2 + 80
		y2 = ginfo_winy/2 + 80
		stick ky
		if ky & 256 {
			lx1 = mousex
			ly1 = mousey
		}
		lx2 = mousex
		ly2 = mousey

		color : pset x1, y1
		boxf x1, y1, x2, y2

		line lx1, ly1, lx2, ly2

		color 255
		pos mousex+16, mousey
		mes ""+getcoli_bl(x1, y1, x2, y2, lx1, ly1, lx2, ly2)
		
		redraw 1
		await 17
	goto*__main
#endif